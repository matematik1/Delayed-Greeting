import sys
import random
from collections import deque

from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QHBoxLayout, QLabel, QSpacerItem, \
    QSizePolicy
from PyQt5.QtGui import QPainter, QColor, QPen, QBrush, QPixmap, QFont, QIcon
from PyQt5.QtCore import Qt, QPropertyAnimation, QRect, QPoint, QEasingCurve, pyqtProperty, QUrl
from PyQt5.Qt import QDesktopServices
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent


class ScrollWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumSize(600, 600)
        self.setMaximumSize(600, 600)
        self.setWindowTitle("Delayed Greeting")



        self._scroll_height = 50
        self.max_scroll_height = 460
        self.is_unfolded = False

        self.scroll_content = (
            "\n–ó–Ω–∞—é —â–æ –∑–∞–ø—ñ–∑–Ω–∏–≤—Å—è –∞–ª–µ –í—ñ—Ç–∞—é!\n"
            "–î–æ—Ä–æ–≥–∞ –º–∞—Ç—É—Å—é, –≤ —Ü–µ–π —Å–≤—ñ—Ç–ª–∏–π –¥–µ–Ω—å,\n"
            "–ù–µ—Ö–∞–π –¥—É—à–∞ —Å–ø—ñ–≤–∞—î, –Ω–∞—á–µ –ø—Ç–∞—Ö!\n"
            "–¢–≤–æ—è –ª—é–±–æ–≤ ‚Äì –Ω–µ–≤–∏—á–µ—Ä–ø–Ω–µ –¥–∂–µ—Ä–µ–ª–æ,\n"
            "–í –æ—á–∞—Ö —Ç–≤–æ—ó—Ö ‚Äì —ñ –Ω—ñ–∂–Ω—ñ—Å—Ç—å, —ñ —Ç–µ–ø–ª–æ.\n\n"
            "–¢–∏ ‚Äì –∞–Ω–≥–µ–ª –º—ñ–π, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–∫–∞ —Ä–æ–¥–∏–Ω–Ω–∞,\n"
            "–¢–≤–æ—î —Ç–µ–ø–ª–æ ‚Äì —è–∫ —Å–æ–Ω—è—á–Ω–∞ –≥–æ–¥–∏–Ω–∞.\n"
            "–ë–∞–∂–∞—é —â–∞—Å—Ç—è, —Ä–∞–¥–æ—Å—Ç—ñ –±–µ–∑ –∫—Ä–∞—é,\n"
            "–ó–¥–æ—Ä–æ–≤'—è –º—ñ—Ü–Ω–æ–≥–æ, –≤—Å–µ —ñ–Ω—à–µ ‚Äì –∑–∞—á–µ–∫–∞—î.\n\n"
            "–•–∞–π –¥–æ–ª—è –¥–∞—Ä—É—î –ª–∏—à —Å–≤—ñ—Ç–ª—ñ –º–∏—Ç—ñ,\n"
            "–ê —Å–µ—Ä—Ü–µ –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–µ –Ω–∞–¥—ñ—ó.\n"
            "–ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –º–∞—Ç—É—Å—é –º–∏–ª–∞,\n"
            "–¢–∏ ‚Äì –Ω–∞–π–¥–æ—Ä–æ–∂—á–∞, —Ç–∏ ‚Äì –º–æ—è —î–¥–∏–Ω–∞!\n"
        )

        self.main_title = "‚ù§Ô∏è–í—ñ—Ç–∞–Ω–Ω—è—á–∫–æ –¥–ª—è –º–∞—Ç—É—Å—ñüíï"

        try:
            self.paper_texture = QPixmap('img/paper_texture.png')
            if self.paper_texture.isNull():
                raise FileNotFoundError("paper_texture.png not found or could not be loaded.")
        except FileNotFoundError as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞–ø–µ—Ä—É: {e}")
            print("–ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–≤—ñ—Ç–ª–æ-–∂–æ–≤—Ç–∏–π –∫–æ–ª—ñ—Ä –ø–∞–ø–µ—Ä—É.")
            self.paper_texture = None

        try:
            self.background_image = QPixmap('img/background_image.png')
            if self.background_image.isNull():
                raise FileNotFoundError("background_image.png not found or could not be loaded.")
        except FileNotFoundError as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            print("–ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É.")
            self.background_image = None

        try:
            self.folded_scroll_image = QPixmap('img/folded_scroll.png')
            if self.folded_scroll_image.isNull():
                raise FileNotFoundError("folded_scroll.png not found or could not be loaded.")
        except FileNotFoundError as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥–æ—Ä–Ω—É—Ç–æ–≥–æ —Å—É–≤–æ—é: {e}")
            print("–ó–≥–æ—Ä–Ω—É—Ç–∏–π —Å—É–≤—ñ–π –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —è–∫ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫.")
            self.folded_scroll_image = None

        self.animation = QPropertyAnimation(self, b"scrollHeight")
        self.animation.setDuration(1200)
        self.animation.setEasingCurve(QEasingCurve.OutQuad)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        if self.background_image:
            painter.drawPixmap(self.rect(), self.background_image)
        else:
            painter.fillRect(self.rect(), QColor(240, 240, 240))

        self.scroll_width = 480
        scroll_x = (self.width() - self.scroll_width) / 2
        scroll_y = 68

        painter.setPen(QPen(QColor("#E75480")))
        title_font = QFont("Times New Roman", 24)
        title_font.setBold(True)
        painter.setFont(title_font)

        title_rect = QRect(0, 10, self.width(), 60)
        painter.drawText(title_rect, Qt.AlignHCenter | Qt.AlignVCenter, self.main_title)

        if self._scroll_height <= 55 and self.folded_scroll_image:
            folded_rect = QRect(int(scroll_x), int(scroll_y), self.scroll_width, 50)
            painter.drawPixmap(folded_rect, self.folded_scroll_image)
        else:
            if self.paper_texture:
                target_rect = QRect(int(scroll_x), int(scroll_y), self.scroll_width, int(self._scroll_height))
                painter.drawPixmap(target_rect, self.paper_texture)
            else:
                painter.setBrush(QBrush(QColor(255, 255, 220)))
                painter.setPen(Qt.NoPen)
                painter.drawRect(int(scroll_x), int(scroll_y), self.scroll_width, int(self._scroll_height))

        if self._scroll_height > self.max_scroll_height * 0.7:
            painter.setPen(QPen(Qt.black))

            font = QFont("Arial", 14)
            font.setBold(True)
            painter.setFont(font)

            # –ü–µ—Ä–µ—Å—É–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ 20 –≤–ø—Ä–∞–≤–æ —Ç–∞ –Ω–∞ 9 –≤–≥–æ—Ä—É
            # text_margin_x –∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ 20 (–ø–æ—á–∞—Ç–∫–æ–≤–æ 20 -> 40)
            # text_margin_y –∑–º–µ–Ω—à–µ–Ω–æ –Ω–∞ 9 (–ø–æ—á–∞—Ç–∫–æ–≤–æ 40 -> 31)
            text_margin_x = 40
            text_margin_y = 31

            text_rect = QRect(int(scroll_x + text_margin_x), int(scroll_y + text_margin_y),
                              self.scroll_width - 2 * text_margin_x,
                              int(self._scroll_height - 2 * text_margin_y))

            painter.drawText(text_rect, Qt.AlignTop | Qt.AlignLeft | Qt.TextWordWrap,
                             self.scroll_content)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            if not self.is_unfolded:
                self.start_unfold_animation()
            else:
                self.start_fold_animation()

    def start_unfold_animation(self):
        self.animation.setStartValue(self._scroll_height)
        self.animation.setEndValue(self.max_scroll_height)
        self.animation.start()
        self.is_unfolded = True

    def start_fold_animation(self):
        self.animation.setStartValue(self._scroll_height)
        self.animation.setEndValue(50)
        self.animation.start()
        self.is_unfolded = False

    @pyqtProperty(int)
    def scrollHeight(self):
        return self._scroll_height

    @scrollHeight.setter
    def scrollHeight(self, value):
        self._scroll_height = value
        self.update()


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Delayed Greeting")
        self.setFixedSize(600, 600)

        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)

        self.scroll_widget = ScrollWidget()
        main_layout.addWidget(self.scroll_widget)

        main_layout.addStretch(1)

        buttons_layout = QHBoxLayout()
        buttons_layout.setContentsMargins(0, 0, 10, 8)
        buttons_layout.setSpacing(10)

        buttons_layout.addSpacing(31)

        self.emoji_label = QLabel("üíï‚ù§Ô∏èüòçüòòüòç‚ù§Ô∏èüíï")
        emoji_font = QFont("Arial", 16)
        self.emoji_label.setFont(emoji_font)
        self.emoji_label.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        buttons_layout.addWidget(self.emoji_label)

        buttons_layout.addStretch(1)

        self.music_btn = QPushButton("–ú—É–∑–∏–∫–∞üíï")
        self.music_btn.setFixedSize(80, 50)
        self.music_btn.clicked.connect(self._toggle_music)
        buttons_layout.addWidget(self.music_btn)

        buttons_layout.addStretch(1)

        self.btn1 = QPushButton()
        self.btn1.setFixedSize(50, 50)
        try:
            icon1 = QIcon('img/pres1.png')
            self.btn1.setIcon(icon1)
            self.btn1.setIconSize(self.btn1.size())
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è pres1.png: {e}")
            self.btn1.setText("B1")
        self.btn1.clicked.connect(lambda: QDesktopServices.openUrl(QUrl(
            "mailto:shmitayura@gmail.com")))
        buttons_layout.addWidget(self.btn1)

        self.btn2 = QPushButton()
        self.btn2.setFixedSize(50, 50)
        try:
            icon2 = QIcon('img/pres2.png')
            self.btn2.setIcon(icon2)
            self.btn2.setIconSize(self.btn2.size())
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è pres2.png: {e}")
            self.btn2.setText("B2")
        self.btn2.clicked.connect(lambda: QDesktopServices.openUrl(
            QUrl("https://t.me/yurch1ks")))
        buttons_layout.addWidget(self.btn2)

        self.btn3 = QPushButton()
        self.btn3.setFixedSize(50, 50)
        try:
            icon3 = QIcon('img/pres3.png')
            self.btn3.setIcon(icon3)
            self.btn3.setIconSize(self.btn3.size())
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è pres3.png: {e}")
            self.btn3.setText("B3")
        self.btn3.clicked.connect(
            lambda: QDesktopServices.openUrl(QUrl("https://github.com/matematik1")))
        buttons_layout.addWidget(self.btn3)

        main_layout.addLayout(buttons_layout)

        self.setLayout(main_layout)

        self.media_player = QMediaPlayer(self)
        self.music_files = [f'music/({i}).mp3' for i in range(1, 10)]
        self.current_playlist = deque()
        self._shuffle_playlist()

        self.media_player.mediaStatusChanged.connect(self._handle_media_status_changed)

    def _shuffle_playlist(self):
        temp_list = list(self.music_files)
        random.shuffle(temp_list)
        self.current_playlist = deque(temp_list)
        print("–°–ø–∏—Å–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—à–∞–Ω–æ.")

    def _play_next_song(self):
        if not self.current_playlist:
            self._shuffle_playlist()
            if not self.current_playlist:
                print("–ù–µ–º–∞—î –º—É–∑–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
                self.media_player.stop()
                return

        song_path = self.current_playlist.popleft()

        import os
        if not os.path.exists(song_path):
            print(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {song_path}. –ü—Ä–æ–ø—É—Å–∫–∞—é —ñ —Å–ø—Ä–æ–±—É—é –Ω–∞—Å—Ç—É–ø–Ω–∏–π.")
            self._play_next_song()
            return

        media_content = QMediaContent(QUrl.fromLocalFile(song_path))
        self.media_player.setMedia(media_content)
        self.media_player.play()
        print(f"–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {song_path}")

    def _toggle_music(self):
        if self.media_player.state() == QMediaPlayer.PlayingState:
            print("–ú—É–∑–∏–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è, –ø–µ—Ä–µ–º–∏–∫–∞—é –ø—ñ—Å–Ω—é...")
            self.media_player.stop()
            self._play_next_song()
        else:
            print("–ú—É–∑–∏–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞, –ø–æ—á–∏–Ω–∞—é –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è...")
            self._play_next_song()

    def _handle_media_status_changed(self, status):
        if status == QMediaPlayer.MediaStatus.EndOfMedia:
            print("–ü–æ—Ç–æ—á–Ω–∞ –ø—ñ—Å–Ω—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è, –≤—ñ–¥—Ç–≤–æ—Ä—é—é –Ω–∞—Å—Ç—É–ø–Ω—É...")
            self._play_next_song()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    try:
        app_icon = QIcon('img/icon.ico')
        if app_icon.isNull():
            raise FileNotFoundError("icon.ico not found or could not be loaded.")
        app.setWindowIcon(app_icon)

    except FileNotFoundError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")
        print("–Ü–∫–æ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–µ –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ 'icon.ico' —ñ—Å–Ω—É—î.")
    except Exception as e:
        print(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")
        print("–Ü–∫–æ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–µ –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
